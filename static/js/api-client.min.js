class ethnos_appAPI{constructor(){this.baseURL="/api/v2",this.cache=new Map,this.cacheTimeout=3e5,this.requestTimeout=15e3}_getCacheKey(e,t){return e+"_"+JSON.stringify(t||{})}_isValidCacheEntry(e){return e&&Date.now()-e.timestamp<this.cacheTimeout}async _fetch(e,t={},r=2){var a=this._getCacheKey(e,t),s=this.cache.get(a);if(this._isValidCacheEntry(s))return s.data;let n;var i=r+1;for(let s=1;s<=i;s++)try{let r=new AbortController;var o=setTimeout(()=>r.abort(),this.requestTimeout),c={...t,signal:r.signal,headers:{"Content-Type":"application/json",...t.headers}},h=await fetch(""+this.baseURL+e,c);if(clearTimeout(o),!h.ok)throw new Error(`API Error: ${h.status} `+h.statusText);var u=await h.json();if("error"===u.status)throw new Error(u.error||"API returned error status");return this.cache.set(a,{data:u,timestamp:Date.now()}),100<this.cache.size&&this._cleanCache(),u}catch(r){if("AbortError"===(n=r).name?console.warn(`Request timeout (attempt ${s}/${i}):`,e):console.warn(`API fetch error (attempt ${s}/${i}):`,r.message),!(s<i)){if("AbortError"===r.name)throw new Error("Timeout ao carregar dados. Tente recarregar a pÃ¡gina.");throw console.error("All retry attempts failed:",r),r}{let e=1e3*s;console.log(`Retrying in ${e}ms...`),await new Promise(t=>setTimeout(t,e))}}throw n}_cleanCache(){var e,t,r=Date.now();for([e,t]of this.cache.entries())r-t.timestamp>this.cacheTimeout&&this.cache.delete(e)}clearCache(){this.cache.clear()}async getAnalytics(){return this._fetch("/analytics/overview")}async getAnnualProduction(){return this._fetch("/analytics/annual-production")}async searchWorks(e={}){var t=new URLSearchParams;e.q&&t.append("q",e.q),e.limit&&t.append("limit",e.limit),e.cursor&&t.append("cursor",e.cursor),e.sort&&t.append("sort",e.sort),e=t.toString();return this._fetch("/works/"+(e?"?"+e:""))}async getWork(e){return this._fetch("/works/"+e)}async searchAuthors(e,t=25){return e=new URLSearchParams({name:e,limit:t.toString()}),this._fetch("/authors/search?"+e)}async getAuthor(e){return this._fetch("/authors/"+e)}async getAuthorWorks(e,t=25,r=null){return t=new URLSearchParams({limit:t.toString()}),r&&t.append("cursor",r),this._fetch(`/authors/${e}/works?`+t)}async getVenues(e={}){var t=new URLSearchParams;e.limit&&t.append("limit",e.limit),e.offset&&t.append("offset",e.offset),e=t.toString();return this._fetch("/venues/"+(e?"?"+e:""))}async getVenue(e){return this._fetch("/venues/"+e)}async getVenueWorks(e,t=25,r=null){return t=new URLSearchParams({limit:t.toString()}),r&&t.append("cursor",r),this._fetch(`/venues/${e}/works?`+t)}async getWorkMetrics(e){return this._fetch("/metrics/work/"+e)}async getRecentWorks(e=10){return this.searchWorks({q:"*",limit:e,sort:"recent"})}async getTopVenues(e=10){return this.getVenues({limit:e,offset:0})}}let api=new ethnos_appAPI;