class ethnos_appAPI{constructor(){this.baseURL="/api/v2",this.cache=new Map,this.cacheTimeout=3e5,this.requestTimeout=15e3}_getCacheKey(t,e){return t+"_"+JSON.stringify(e||{})}_isValidCacheEntry(t){return t&&Date.now()-t.timestamp<this.cacheTimeout}async _fetch(t,e={},r=2){const s=this._getCacheKey(t,e),a=this.cache.get(s);if(this._isValidCacheEntry(a))return a.data;let n;const o=r+1;for(let r=1;r<=o;r++)try{const r=new AbortController,a=setTimeout(()=>r.abort(),this.requestTimeout),n={...e,signal:r.signal,headers:{"Content-Type":"application/json",...e.headers}},o=await fetch(`${this.baseURL}${t}`,n);if(clearTimeout(a),!o.ok)throw new Error(`API Error: ${o.status} ${o.statusText}`);const c=await o.json();if("error"===c.status)throw new Error(c.error||"API returned error status");return this.cache.set(s,{data:c,timestamp:Date.now()}),this.cache.size>100&&this._cleanCache(),c}catch(e){if(n=e,"AbortError"===e.name?console.warn(`Request timeout (attempt ${r}/${o}):`,t):console.warn(`API fetch error (attempt ${r}/${o}):`,e.message),!(r<o)){if("AbortError"===e.name)throw new Error("Timeout ao carregar dados. Tente recarregar a pÃ¡gina.");throw console.error("All retry attempts failed:",e),e}{const t=1e3*r;console.log(`Retrying in ${t}ms...`),await new Promise(e=>setTimeout(e,t))}}throw n}_cleanCache(){const t=Date.now();for(const[e,r]of this.cache.entries())t-r.timestamp>this.cacheTimeout&&this.cache.delete(e)}clearCache(){this.cache.clear()}async getAnalytics(){return this._fetch("/analytics/overview")}async getAnnualProduction(){return this._fetch("/analytics/annual-production")}async searchWorks(t={}){const e=new URLSearchParams;t.q&&e.append("q",t.q),t.limit&&e.append("limit",t.limit),t.cursor&&e.append("cursor",t.cursor),t.sort&&e.append("sort",t.sort);const r=e.toString();return this._fetch("/works/"+(r?"?"+r:""))}async getWork(t){return this._fetch(`/works/${t}`)}async searchAuthors(t,e=25){const r=new URLSearchParams({name:t,limit:e.toString()});return this._fetch(`/authors/search?${r}`)}async getAuthor(t){return this._fetch(`/authors/${t}`)}async getAuthorWorks(t,e=25,r=null){const s=new URLSearchParams({limit:e.toString()});return r&&s.append("cursor",r),this._fetch(`/authors/${t}/works?${s}`)}async getVenues(t={}){const e=new URLSearchParams;t.limit&&e.append("limit",t.limit),t.offset&&e.append("offset",t.offset);const r=e.toString();return this._fetch("/venues/"+(r?"?"+r:""))}async getVenue(t){return this._fetch(`/venues/${t}`)}async getVenueWorks(t,e=25,r=null){const s=new URLSearchParams({limit:e.toString()});return r&&s.append("cursor",r),this._fetch(`/venues/${t}/works?${s}`)}async getWorkMetrics(t){return this._fetch(`/metrics/work/${t}`)}async getRecentWorks(t=10){return this.searchWorks({q:"*",limit:t,sort:"recent"})}async getTopVenues(t=10){return this.getVenues({limit:t,offset:0})}}let api=new ethnos_appAPI;